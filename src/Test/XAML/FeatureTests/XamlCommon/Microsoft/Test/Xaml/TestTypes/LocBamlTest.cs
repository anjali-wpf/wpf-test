// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Windows;
using Microsoft.Test.Baml.Utilities;
using Microsoft.Test.Logging;

namespace Microsoft.Test.Xaml.TestTypes
{
    /******************************************************************************
    * CLASS:          LocBamlTest
    ******************************************************************************/

    /// <summary>
    /// Class for comparing Xaml and Baml Infosets.
    /// </summary>
    public class LocBamlTest : BamlTestType
    {
        #region Private Data

        /// <summary>
        /// The expected number of localized values, as specified in the .xtc file.
        /// </summary>
        private string _workingDirectory = Environment.CurrentDirectory;

        /// <summary>
        /// The expected number of localized values, as specified in the .xtc file.
        /// </summary>
        private string _releaseDirectory = string.Empty;

        /// <summary>
        /// The expected number of localized values, as specified in the .xtc file.
        /// </summary>
        private int _expectedCount = 0;

        /// <summary>
        /// The name of the .csv file that will be generated by LocBaml.exe.
        /// </summary>
        private string _csvFileName = string.Empty;

        /// <summary>
        /// The name of the .csv file that has been localized.
        /// </summary>
        private string _localizedCsvFileName = string.Empty;

        /// <summary>
        /// The name of the file containing original vs. localized extracted strings.
        /// </summary>
        private string _extractedStringsFileName = "ExtractedStrings.txt";

        #endregion

        #region Public and Protected Members

        /******************************************************************************
        * Function:          Run
        ******************************************************************************/

        /// <summary>
        /// Runs a LocBaml Test.
        /// </summary>
        public override void Run()
        {
            string targetCulture = "de-DE";
            string originalResourcesPath = string.Empty;
            string localizedResourcesPath = string.Empty;
            string destResourcesDll = string.Empty;
            List<BamlString> originalNonLocalizedStrings = new List<BamlString>();
            List<BamlString> localizedStrings = new List<BamlString>();
            string projectFileNameWithoutExtension = string.Empty;
            string originalDasmFileName = "OriginalRes.dasm";
            string localizedDasmFileName = "LocalizedRes.dasm";
            string locString = "zzz";
            string markerString = "LLL";
            int applicationTimeout = 30000;

            try
            {
                // Specify the path to AL.exe for the compiler.
                GlobalProperties = new Dictionary<string, string>();
                GlobalProperties.Add("AlToolPath", Environment.CurrentDirectory);

                // STEP 1: The base class will take care of compiling the Xaml file; it sets ProjectXamlFileName.
                ProjectFileName = "GenericLocBamlTest.csproj";  // Override the default project name.
                GlobalLog.LogStatus("---Dynamically Compiling the Project");
                base.Run();

                _releaseDirectory = _workingDirectory + @"\bin\Release";
                _csvFileName = Path.GetFileNameWithoutExtension(XamlFileName) + ".csv";
                projectFileNameWithoutExtension = Path.GetFileNameWithoutExtension(ProjectXamlFileName);
                destResourcesDll = projectFileNameWithoutExtension + ".resources.dll";
                originalResourcesPath = _workingDirectory + @"\bin\Release\" + targetCulture + @"\" + destResourcesDll;
                localizedResourcesPath = _workingDirectory + @"\" + destResourcesDll;

                Initialize();

                // Copy the .exe to the current directory; it is needed by LocBaml for parsing.
                File.Copy(_releaseDirectory + @"\" + projectFileNameWithoutExtension + ".exe", _workingDirectory + @"\" + projectFileNameWithoutExtension + ".exe", true);

                // STEP 2: Call LocBaml /Parse to create the original .csv file.
                GlobalLog.LogStatus("---Calling ExecuteLocBaml to Parse");
                if (!LocHelper.ExecuteLocBaml("Parse", _workingDirectory, originalResourcesPath, _csvFileName, targetCulture))
                {
                    FailTestCase("FAIL:  ExecuteLocBaml (parse) failed.");
                }
                else
                {
                    // Verification #1: Verify that the .csv file produced by LocBaml /parse is correct.
                    // If it is not, fail the test and do not proceed to the next steps.
                    GlobalLog.LogStatus("---Calling ValidateParseResults (Verification #1)");
                    if (!LocHelper.ValidateParseResults(_csvFileName))
                    {
                        FailTestCase("FAIL:  ParseBamlResources failed.\nThe actual .csv failed to match the expected master.\nGo to the 'Logs location' shown below to compare the following files:\n\tExpected:  " + Path.GetFileNameWithoutExtension(_csvFileName) + ".MasterCsv\n\tActual: " + _csvFileName + "\n\tOriginal Markup:  " + Path.GetFileNameWithoutExtension(_csvFileName) + ".xaml");
                    }

                    // Verification #2: Execute the test project, to ensure that it doesn’t throw before being localized.
                    // Execute the app in the Release folder; it uses the resources.dll file in the language sub-folder, e.g., \bin\Release\targetCulture.
                    GlobalLog.LogStatus("---Calling RunApplication (Verification #2)");
                    File.Copy(_workingDirectory + @"\Launcher.exe", _releaseDirectory + @"\Launcher.exe", true);

                    // Changing current directory to the directory containing the executable to be launched; the executable 
                    // requires the subdirectory containing the resources.dll.
                    Environment.CurrentDirectory = _releaseDirectory;

                    if (!LocHelper.RunApplication(projectFileNameWithoutExtension, targetCulture, applicationTimeout))
                    {
                        FailTestCase("FAIL: RunApplication failed to complete.");
                    }

                    Environment.CurrentDirectory = _workingDirectory; // Restore current directory.

                    // STEP 3: Extract loc strings from the original resource.dll file.
                    GlobalLog.LogStatus("---Calling ExtractStringsFromResourceBinary");
                    originalNonLocalizedStrings = LocHelper.ExtractStringsFromResourceBinary(originalResourcesPath, originalDasmFileName);

                    // STEP 4: Insert pseudo-loc strings into the .csv.
                    GlobalLog.LogStatus("---Calling PseudoLocalizeStringTableFile");
                    _localizedCsvFileName = LocHelper.PseudoLocalizeStringTableFile(_csvFileName, locString);

                    // STEP 5: Generate a new resources.dll file that is localized, using LocBaml /Generate.
                    GlobalLog.LogStatus("---Calling ExecuteLocBaml to generate");
                    if (!LocHelper.ExecuteLocBaml("Generate", _workingDirectory, originalResourcesPath, _localizedCsvFileName, targetCulture))
                    {
                        FailTestCase("FAIL:  ExecuteLocBaml (generate) failed.");
                    }

                    // STEP 6: Extract the localized strings from the new localized resource.dll file located in workingDirectory.
                    GlobalLog.LogStatus("---Calling ExtractStringsFromResourceBinary");
                    localizedStrings = LocHelper.ExtractStringsFromResourceBinary(localizedResourcesPath, localizedDasmFileName);

                    // Verification #3: Check the count of localized values, i.e., the strings containing locString.
                    // It's possible that in some cases, some values are correctly localized, but others are dropped
                    // or localized when they should not be. The expectedCount check will fail the test if that happens.
                    GlobalLog.LogStatus("---Calling CheckLocalizedCount (Verification #3)");
                    if (!LocHelper.CheckLocalizedCount(ref localizedStrings, locString, _expectedCount))
                    {
                        FailTestCase("FAIL: Actual Localized Count is incorrect.");
                    }

                    // Verification #4:  Compare the localized strings to the original strings.
                    GlobalLog.LogStatus("---Calling CompareExtractedValues (Verification #4)");
                    if (!LocHelper.CompareExtractedValues(originalNonLocalizedStrings, localizedStrings, locString, markerString, _extractedStringsFileName, _expectedCount))
                    {
                        FailTestCase("FAIL: CompareExtractedValues failed.");
                    }

                    // Verification #5: Execute the test project, to ensure that it doesn’t throw after being localized.
                    GlobalLog.LogStatus("---Calling RunApplication (Verification #5)");
                    Environment.CurrentDirectory = _releaseDirectory;
                    if (!LocHelper.RunApplication(projectFileNameWithoutExtension, targetCulture, applicationTimeout))
                    {
                        FailTestCase("FAIL: Second RunApplication failed to complete.");
                    }

                    GlobalLog.LogEvidence("PASS: LocBamlTest sucessful.");
                    LocalTestResult = TestResult.Pass;
                }
            }
            catch (Exception ex)
            {
                WriteFilesToDisc();
                GlobalLog.LogEvidence("FAIL!  Unexpected exception.");
                GlobalLog.LogStatus(ex.ToString());
                LocalTestResult = TestResult.Fail;
            }
            finally
            {
                if (this.GetType().Equals(typeof(LocBamlTest)))
                {
                    CleanUp();
                }
            }
        }

        #endregion

        #region Private Members

        /******************************************************************************
        * Function:          Initialize
        ******************************************************************************/

        /// <summary>
        /// Initialization: read test parameters from an .xtc file; set up test environment.
        /// </summary>
        private void Initialize()
        {
            if (BamlFileName == string.Empty)
            {
                throw new TestSetupException("BamlFileName returned an empty string.");
            }

            // Ensures that the test starts on a clean slate
            LocalTestResult = TestResult.Unknown;

            // SET TEST PARAMETER: expectedCount.  Specifies the expected number of localized values.
            string expectedCountParameter = DriverState.DriverParameters["ExpectedCount"];

            if (string.IsNullOrEmpty(expectedCountParameter))
            {
                throw new TestSetupException("ExpectedCount is incorrectly specifed or not specifed in the .xtc file.");
            }
            else
            {
                _expectedCount = Convert.ToInt32(expectedCountParameter);
            }

            GlobalLog.LogStatus("DisplayName: " + DriverState.TestName);
        }

        /******************************************************************************
        * Function:          FailTestCase
        ******************************************************************************/

        /// <summary>
        /// Handle a test case failure.  Write files to disc that are useful for debugging.
        /// </summary>
        /// <param name="message">The error message to be displayed.</param>
        private void FailTestCase(string message)
        {
            WriteFilesToDisc();

            GlobalLog.LogEvidence("\n*************************\n" + message + "\n*************************\n");

            throw new TestValidationException("FAIL: LocBamlTest failed.");
        }

        /******************************************************************************
        * Function:          WriteFilesToDisc
        ******************************************************************************/

        /// <summary>
        /// Write files to disc using LogFile().
        /// </summary>
        private void WriteFilesToDisc()
        {
            // The original .csv.
            if (File.Exists(_workingDirectory + @"\" + _csvFileName))
            {
                GlobalLog.LogFile(_workingDirectory + @"\" + _csvFileName);
            }

            // The localized .csv.
            if (File.Exists(_workingDirectory + @"\" + _localizedCsvFileName))
            {
                GlobalLog.LogFile(_workingDirectory + @"\" + _localizedCsvFileName);
            }

            // The .xaml file being tested.
            if (File.Exists(_workingDirectory + @"\" + Path.GetFileNameWithoutExtension(_csvFileName) + ".xaml"))
            {
                GlobalLog.LogFile(_workingDirectory + @"\" + Path.GetFileNameWithoutExtension(_csvFileName) + ".xaml");
            }

            if (File.Exists(_workingDirectory + @"\" + Path.GetFileNameWithoutExtension(_csvFileName) + ".MasterCsv"))
            {
                GlobalLog.LogFile(_workingDirectory + @"\" + Path.GetFileNameWithoutExtension(_csvFileName) + ".MasterCsv");
            }

            if (File.Exists(_workingDirectory + @"\" + _extractedStringsFileName))
            {
                GlobalLog.LogFile(_workingDirectory + @"\" + _extractedStringsFileName);
            }
        }
        #endregion
    }
}
