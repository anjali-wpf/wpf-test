<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="MyNavApp"
    >
    
    <x:Code><![CDATA[
    
    Microsoft.Test.Logging.TestLog log = null;
     bool _browserhostedapp = false;
     
     protected override void OnStartup(System.Windows.StartupEventArgs e)
     {    
                              
      log = Microsoft.Test.Logging.TestLog.Current; 
      // log.Stage = Microsoft.Test.Logging.TestStage.Initialize;

        if ( AppDomain.CurrentDomain.FriendlyName.ToString().Contains(".xbap") )        
        {
            _browserhostedapp = true;
        }

      log.LogStatus("Loading Component");

      // log.Stage = Microsoft.Test.Logging.TestStage.Run;

        System.Reflection.Assembly myassembly = System.Reflection.Assembly.Load("MyComponent");

        if ( myassembly != null )
        {
            log.LogStatus("Component Loaded");
        }
        else
        {
            log.LogStatus("Component could not be loaded");
            goto Exit;
        }

        Type mywindow = myassembly.GetType("MyControls.MyWindow");
        if ( mywindow == null )
        {
            log.LogStatus("Could not get type for MyControls.MyWindow");
            goto Exit;
        }


        Object obj = Activator.CreateInstance(mywindow);
        if ( obj == null )
        {
            log.LogStatus("Component instance cannot be created.");
            goto Exit;
        }

        System.Reflection.MethodInfo minfo = mywindow.GetMethod("Show");
        if ( minfo == null )
        {
            log.LogStatus("Show method not found in component");
            goto Exit;
        }

        minfo.Invoke(obj, new Object[0]);

            //minfo = mywindow.GetMethod("get_Text");
            //if (minfo == null)
            //{
            //    //log.LogStatus("get_Text method not found in component.");
            //    //goto Exit;
            //}
        
        minfo = mywindow.GetMethod("get_Topmost");

        object o = minfo.Invoke(obj,new Object[0]);
        if ( o == null )
        {
            log.LogStatus("get_Topmost is true.");
            goto Exit;
        }


        //if ( o.ToString() == "MyWindow" )
        if (Convert.ToBoolean(o) == false)
        {
            log.LogStatus("Explicit load worked");
            log.Result = Microsoft.Test.Logging.TestResult.Pass;            
        }
        else
        {
            log.LogStatus("Explicit load did not work.");        
            log.Result = Microsoft.Test.Logging.TestResult.Fail;        
        }
        
        ShutdownApp();

Exit:
        log.LogStatus("Explicit load did not work.");        
        log.Result = Microsoft.Test.Logging.TestResult.Fail;
        
        ShutdownApp();
        
        base.OnStartup(e);
     }

     void OnLoad ( object sender, NavigationEventArgs e )
     {
        ShutdownApp();     }

    protected override void OnExit(ExitEventArgs e)
    {
            if ( _browserhostedapp == false )
            {
                log.LogStatus("Shutting down application");
                // log.Close();
            }
    }
    
    private void ShutdownApp()
    {

        // log.Stage = Microsoft.Test.Logging.TestStage.Cleanup;

        if ( _browserhostedapp == false )        
        {
            System.Windows.Application.Current.Shutdown();
        }
        else
        {
            log.LogStatus("Shutting down application");
            // log.Close();                    
        }            
            
        Microsoft.Test.Loaders.ApplicationMonitor.NotifyStopMonitoring();

    }
        

    public bool BrowserHostedApp
    {
        get
        {
            return _browserhostedapp;
        }
    }

    ]]></x:Code>

</Application>
