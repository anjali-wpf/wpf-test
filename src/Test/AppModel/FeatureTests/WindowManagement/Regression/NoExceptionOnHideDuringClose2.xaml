<!--**************************************************************************
//
//  Description: Verify calling Window.Hide() from Window.Closing EventHandler, canceling close, and re-showing works
//  Test Logic:   (1) Create a window
//                (2) Register EventHandler for Closing Event
//                (3) Within Handler, cancel close and call Window.Hide() after a few seconds
//                (4) Call Show and verify window shows up, fail otherwise
//
//
//**************************************************************************-->
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="NoExceptionOnHideDuringClose2"
     ContentRendered="OnContentRendered"
     Title="Avalon.Window.Test (Exception on Hide() during Closing event)"
     Top="0"
     Left="0"
     Width="500"
     Height="500" xmlns:MappingPIGen1="clr-namespace:Microsoft.Windows.Test.Client.AppSec.BVT.ELCommon" xmlns:MappingPIGen2="clr-namespace:Microsoft.Test.Input"
     >
        <StackPanel>
            <Button>Button1</Button>
        </StackPanel>
		
    <x:Code>
        <![CDATA[                     
            AutomationHelper AH = new AutomationHelper();
            System.Windows.Threading.DispatcherTimer timer;

            void OnContentRendered(object sender, EventArgs e)
            {               
                Closing += windowClosing;
                Logger.Status("Window loaded and registered Closing event handler... sleeping 4 seconds then closing...");
                AH.Pause(4000, delegate {this.Close();} );
            }
           
            void windowClosing(object sender, System.ComponentModel.CancelEventArgs e)
            {
                Closing -= windowClosing;
                Logger.Status("Inside Window Closing event... ");
                try 
                {
                    IsVisibleChanged += visibleChanged;
                    Logger.Status("Calling Window.Hide()...");
                    this.Hide();   
                    Logger.Status("Successfully called Hide() method...");
                    e.Cancel = true;
                }
                catch (System.InvalidOperationException)
                {
                    Logger.LogFail("Error: Got System.InvalidOperationException on calling Window.Hide() inside closing event! (DD bugs 108284 regression)");
                }        
            }

            void visibleChanged(object sender, DependencyPropertyChangedEventArgs e)
            {
                if(Visibility == Visibility.Hidden)
                {
                    Logger.Status("Window was hidden, re-showing in a few seconds...");

                    timer = new System.Windows.Threading.DispatcherTimer();
                    timer.Tick += new EventHandler(OnTick);
                    timer.Interval = TimeSpan.FromMilliseconds(4000);
                    timer.Start();
                }
                else if(Visibility == Visibility.Visible)
                {
                    IsVisibleChanged -= visibleChanged;
                    timer.Stop();
                    Logger.LogPass("Window was successfully re-shown.");
                    Close();
                }
            }

            void OnTick(object sender, EventArgs e)
            {
                Logger.Status("Re-showing window...");
                Show();
            }
        ]]>
    </x:Code>
</Window>

