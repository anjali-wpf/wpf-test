// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using Microsoft.Test.Discovery;
using Microsoft.Test.Logging;
using Microsoft.Test.TestTypes;
using System.Collections.Generic;
using System.Windows.Data;
using System.Collections;
using System.ComponentModel;
using System;

namespace Microsoft.Test.DataServices
{
    /// <summary>
    /// <description>
    /// Regression test for Grouping bugs
    /// </description>
    /// <relatedBugs>



    /// </relatedBugs>
    /// </summary>





    [Test(2, "Grouping", "RegressionGrouping")]
    public class RegressionGrouping : WindowTest
    {
        #region Constructors

        public RegressionGrouping()
        {
            RunSteps += new TestStep(AddGroupItemToItemsControlDirectly);
            RunSteps += new TestStep(GroupingCustomSortCVS);
            RunSteps += new TestStep(SelectionChangedException);
        }

        #endregion

        #region Public and Protected Members

        /// <summary>
        /// Direct copy from Customer repro
        /// </summary>
        public class NumberWithGroup
        {
            private int _number;
            private string _group;

            public NumberWithGroup(int number, string group)
            {
                _number = number;
                _group = group;
            }

            public int Number
            {
                get { return _number; }
            }

            public string Group
            {
                get { return _group; }
            }
        }

        /// <summary>
        /// Direct copy from Customer repro
        /// </summary>
        public class NumberWithGroupSorter : IComparer
        {
            #region IComparer Members

            public int Compare(object x, object y)
            {
                NumberWithGroup first = (NumberWithGroup)x;
                NumberWithGroup second = (NumberWithGroup)y;
                int groupCompareResult = first.Group.CompareTo(second.Group);
                if (groupCompareResult != 0)
                    return groupCompareResult;
                return first.Number.CompareTo(second.Number);
            }

            #endregion
        }

        #endregion

        #region Private Members

        // 
        private TestResult AddGroupItemToItemsControlDirectly()
        {
            // Adding a GroupItem directly to an ItemsControl instead of them being autogenerated by the IC was
            // causing a null-ref

            ItemsControl ic = new ItemsControl();
            Window.Content = ic;
            GroupItem gi = new GroupItem();
            ic.Items.Add(gi);
            WaitForPriority(DispatcherPriority.SystemIdle);

            return TestResult.Pass;
        }

        // 
        private TestResult GroupingCustomSortCVS()
        {
            // Minimal translation from Customer repro

            List<NumberWithGroup> numbers = new List<NumberWithGroup>();
            numbers.Add(new NumberWithGroup(44, "Fourth"));
            numbers.Add(new NumberWithGroup(1, "First"));
            numbers.Add(new NumberWithGroup(25, "Second"));
            numbers.Add(new NumberWithGroup(21, "Second"));
            numbers.Add(new NumberWithGroup(5, "First"));
            numbers.Add(new NumberWithGroup(3, "First"));

            CollectionViewSource viewSource = new CollectionViewSource();
            viewSource.Source = numbers;
            ListCollectionView invalidView = (ListCollectionView)viewSource.View;

            // Custom sort by alphabetical of group string then low-high of number
            invalidView.CustomSort = new NumberWithGroupSorter();
            // Group by group string - this should make no difference, actually
            viewSource.GroupDescriptions.Add(new PropertyGroupDescription("Group"));

            List<NumberWithGroup> expectedOrderNumbers = new List<NumberWithGroup>();
            expectedOrderNumbers.Add(numbers[1]);
            expectedOrderNumbers.Add(numbers[5]);
            expectedOrderNumbers.Add(numbers[4]);
            expectedOrderNumbers.Add(numbers[0]);
            expectedOrderNumbers.Add(numbers[3]);
            expectedOrderNumbers.Add(numbers[2]);

            for (int i = 0; i < expectedOrderNumbers.Count; i++)
            {
                if (invalidView.GetItemAt(i) != expectedOrderNumbers[i]) return TestResult.Fail;
            }
            
            return TestResult.Pass;
        }

        // 
        private TestResult SelectionChangedException()
        {
            // If an exception is thrown during a SelectionChanged event handler, selection and
            // currency can get out of sync before the bugfix.
            ListBox lb = new ListBox();
            Places p = new Places();
            ListCollectionView lcv = (ListCollectionView)CollectionViewSource.GetDefaultView(p);
            lb.IsSynchronizedWithCurrentItem = true;
            lb.DataContext = p;
            lb.SetBinding(ListBox.ItemsSourceProperty, new Binding());

            // Select first item and verify selection/currency are in sync
            lb.SelectedIndex = 0;
            if (lb.SelectedItem != lcv.CurrentItem) return TestResult.Fail;

            // Wire up a handler that throws an exception to CurrentChanged. Call MoveCurrentToNext
            // and make sure currency and selection stay in sync. Then unwire the handler and call
            // MoveCurrentToNext and make sure currency and selection are still in sync. It was after
            // the second MoveCurrentToNext that they were going out of sync due to the bug.
            SelectionChangedEventHandler selectionChangedEventHandler = new SelectionChangedEventHandler(selectionChangedThrowsExceptionHandler);
            lb.SelectionChanged += selectionChangedEventHandler;

            try
            {
                lcv.MoveCurrentToNext();
            }
            catch (Exception)
            {
            }

            lb.SelectionChanged -= selectionChangedEventHandler;

            if (lb.SelectedItem != lcv.CurrentItem || lcv.CurrentPosition != 1) return TestResult.Fail;

            lcv.MoveCurrentToNext();

            if (lb.SelectedItem != lcv.CurrentItem || lcv.CurrentPosition != 2) return TestResult.Fail;

            return TestResult.Pass;
        }

        private void selectionChangedThrowsExceptionHandler(object sender, SelectionChangedEventArgs e)
        {
            throw new Exception();
        }

        #endregion
    }
}
