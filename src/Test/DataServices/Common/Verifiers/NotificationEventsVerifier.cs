// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows;
using Microsoft.Test.RenderingVerification;
using System.Reflection;
using System.Threading; 
using System.Windows.Threading;
using Microsoft.Test.Logging;
using Microsoft.Test.Verification;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections;

namespace Microsoft.Test.Verifiers
{
    /// <summary>
    /// Verifies that the CollectionChange and PropertyChange Notification Events are raised correctly.
    /// </summary>
    /// 
    public static class NotificationEventsVerifier
    {

        #region Public Members
                
        /// <summary>
        /// Verifies Exceptions resulting from actions on a collection. 
        /// Throws TestValidationException in case there are failures detected.
        /// </summary>
        /// <param name="actionCallback">The action to be performed</param>
        /// <param name="collection">The collection to perform the action on</param>
        /// <param name="expectedExceptionType">The type exception expected</param>
        public static void VerifyNotificationEvents(ActionCallback actionCallback,
                                            INotifyCollectionChanged collection,
                                            Type expectedExceptionType)
        {
            VerifyNotificationEvents(actionCallback, collection, null, new string[0], expectedExceptionType);
        }

        /// <summary>
        /// Verifies CollectionChangedEventArgs and ChangedPropertyNames resulting from actions on a collection. 
        /// Throws TestValidationException in case there are failures detected.
        /// </summary>
        /// <param name="actionCallback">The action to be performed</param>
        /// <param name="collection">The collection to perform the action on</param>        
        /// <param name="expectedEventArgs">The eventArgs that are expected to be generated by action</param>
        /// <param name="expectedPropertyNames">The changed PropertyNames that are expected to be generated by action</param>
        public static void VerifyNotificationEvents(ActionCallback actionCallback,
                                                    INotifyCollectionChanged collection,
                                                    NotifyCollectionChangedEventArgs expectedEventArgs,
                                                    params string[] expectedPropertyNames)
        {
            VerifyNotificationEvents(actionCallback, collection, expectedEventArgs, expectedPropertyNames, null);
        }

        #endregion


        #region Private Members
                
        /// <summary>
        /// Base Method. Verifies Exceptions, CollectionChangedEventArgs and ChangedPropertyNames resulting from actions on a collection. 
        /// </summary>
        /// <param name="actionCallback">The action to be performed</param>
        /// <param name="collection">The collection to perform the action on</param>        
        /// <param name="expectedEventArgs">The eventArgs that are expected to be generated by action</param>
        /// <param name="expectedPropertyNames">The changed PropertyNames that are expected to be generated by action</param>
        /// <param name="expectedExceptionType">The type exception expected</param>
        private static void VerifyNotificationEvents(ActionCallback actionCallback,
                                                    INotifyCollectionChanged collection,
                                                    NotifyCollectionChangedEventArgs expectedEventArgs,
                                                    string[] expectedPropertyNames,
                                                    Type expectedExceptionType)
        {

            if (actionCallback == null)
            {
                throw new ArgumentNullException("actionCallback");
            }
            if (expectedPropertyNames == null)
            {
                throw new ArgumentNullException("expectedPropertyNames");
            }
            if (collection == null)
            {
                throw new ArgumentNullException("collection");
            }
            
            INotifyPropertyChanged propertyChangedCollection = collection as INotifyPropertyChanged;
            List<NotifyCollectionChangedEventArgs> actualEventArgs = new List<NotifyCollectionChangedEventArgs>();
            List<string> actualPropertyNames = new List<string>();
            Type actualExceptionType = null;

            // Create an anonymous delegate for the event handler
            NotifyCollectionChangedEventHandler collectionChangeEventHandlerDelegate = delegate(object sender, NotifyCollectionChangedEventArgs e)
            {
                actualEventArgs.Add(e);
            };

            // Create an anonymous delegate for the event handler
            PropertyChangedEventHandler propertyChangeEventHandlerDelegate = delegate(object sender, PropertyChangedEventArgs e)
            {
                // Grab the PropertyName for the Changed Property
                actualPropertyNames.Add(e.PropertyName);
            };

            // Attach the Collection Change Event Handler.
            collection.CollectionChanged += collectionChangeEventHandlerDelegate;

            // Attach the Property Change Event Handler.
            if (expectedPropertyNames != null)
            {
                propertyChangedCollection.PropertyChanged += propertyChangeEventHandlerDelegate;
            }


            // Perform the action.
            try
            {
                actionCallback();
            }
            catch (Exception e)
            {
                actualExceptionType = e.GetType();
            }
            // Make sure that the event handlers are removed.
            finally
            {
                collection.CollectionChanged -= collectionChangeEventHandlerDelegate;

                if (expectedPropertyNames != null)
                {
                    propertyChangedCollection.PropertyChanged -= propertyChangeEventHandlerDelegate;
                }
            }

            // Verification.
            if (actualExceptionType != expectedExceptionType)
            {
                throw new TestValidationException("ExceptionTypes don't match. Expected: " + expectedExceptionType.ToString() + "Got: " + actualExceptionType.ToString());
            }
            
            // The CollectionsChange event handler should only be called once.
            if (actualEventArgs.Count > 0 && expectedEventArgs == null)
            {
                throw new TestValidationException("collectionChanged Events Raised when none were expected.");
            }

            if (expectedEventArgs != null)
            {
                if (actualEventArgs.Count != 1)
                {
                    throw new TestValidationException("The collectionChangeEventHandler was called other than once.");
                }

                // Verify CollectionChangeEventArgs
                CompareEventArgs(actualEventArgs[0], expectedEventArgs);
            }

            // Verify PropertyNames.
            CompareLists(actualPropertyNames, new List<string>(expectedPropertyNames), "ChangedPropertyNames");
        }


        private static void CompareLists(IList actualList, IList expectedList, string message)
        {
            if (actualList == expectedList)
            {
                return;
            }

            if (actualList == null || expectedList == null)
            {
                throw new TestValidationException("Actual list of " + message + " does not match expected list.");
            }

            if (actualList.Count != expectedList.Count)
            {
                throw new TestValidationException("Actual list of " + message + " does not contain the same number of items as the expected list.");
            }

            foreach (object actualItem in actualList)
            {
                if (!expectedList.Contains(actualItem))
                {
                    throw new TestValidationException("Actual list of " + message + " does not contain expected items.");
                }
            }
        }

        private static void CompareEventArgs(NotifyCollectionChangedEventArgs actual, NotifyCollectionChangedEventArgs expected)
        {
            if (actual.Action != expected.Action)
            {
                throw new TestValidationException("Unexpected CollectionChangeNotification Action. Expected: " + expected.Action.ToString() + " Got: " + actual.Action.ToString());
            }
            if (actual.NewStartingIndex != expected.NewStartingIndex)
            {
                throw new TestValidationException("Unexpected CollectionChangeNotification NewStartingIndex. Expected: " + expected.NewStartingIndex.ToString() + " Got: " + actual.NewStartingIndex.ToString());
            }
            if (actual.OldStartingIndex != expected.OldStartingIndex)
            {
                throw new TestValidationException("Unexpected CollectionChangeNotification OldStartingIndex. Expected: " + expected.OldStartingIndex.ToString() + " Got: " + actual.OldStartingIndex.ToString());
            }
            CompareLists(actual.NewItems, expected.NewItems, "CollectionChangeNotification.NewItems");
            CompareLists(actual.OldItems, expected.OldItems, "CollectionChangeNotification.OldItems");
        }

        #endregion
    }

    public delegate void ActionCallback();        
}
