<!-- If you change the root element of this file, be sure to change the class that is subclassed in MyApp.xaml.cs -->
<Application
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="ClassicStyles.MyApp"
    x:CodeBehind="MyApp.xaml.cs"
    StartingUp="AppStartingUp">
    <!-- Resources & Styles defined in this section will impact the entire application.  -->
    <Application.Resources>


    <!--
         ****************************************
         * AccessKey Style                      *
         ****************************************
    -->

    <Style x:Key="{x:Type AccessKey}" BasedOn="{x:Null}" TargetType="{x:Type AccessKey}">
        <Style.Triggers>
            <Trigger Property="KeyboardNavigation.ShowKeyboardCues" Value="true">
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--
         ****************************************
         * Label Style                          *
         ****************************************
    -->

        <Style x:Key="{x:Type Label}" BasedOn="{x:Null}" TargetType="{x:Type Label}">
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="ClipToBounds" Value="True" />
            <Setter Property="Padding" Value="5" />
            <Setter Property="AlignmentX" Value="Left" />
            <Setter Property="AlignmentY" Value="Top" />
            <Setter Property="Template">
            
            <ControlTemplate TargetType="{x:Type Label}">
                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                    <StackPanel Margin="{TemplateBinding Padding}" AlignmentX="{TemplateBinding AlignmentX}" AlignmentY="{TemplateBinding AlignmentY}">
                        <ContentPresenter x:Name="ContentSite" />
                    </StackPanel>
                </Border>
            </ControlTemplate>
            
            </Setter>
        </Style>

    <Style x:Key="http://schemas.microsoft.com/2003/xaml/ContentControl/DropShadowEffect" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="4" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="4" />
                <RowDefinition Height="4" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="4" />
                </Grid.RowDefinitions>

                <!-- TopRight -->
                <Rectangle Grid.Row="1" Grid.Column="3">
                    <Rectangle.Fill>
                        <RadialGradientBrush Focus="0,1" Center="0,1" RadiusX=".9" RadiusY=".9">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Color="#99000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>

                <!-- BottomRight -->
                <Rectangle Grid.Row="3" Grid.Column="3">
                    <Rectangle.Fill>
                        <RadialGradientBrush Focus="0,0" Center="0,0" RadiusX=".9" RadiusY=".9">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Color="#88000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>

                <!-- Right -->
                <Rectangle Grid.Row="2" Grid.Column="3">
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="#99000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>

                <!-- BottomLeft -->
                <Rectangle Grid.Row="3" Grid.Column="1">
                    <Rectangle.Fill>
                        <RadialGradientBrush Focus="1,0" Center="1,0" RadiusX=".9" RadiusY=".9">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Color="#99000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>

                <!-- Bottom -->
                <Rectangle Grid.Row="3" Grid.Column="2">
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="#99000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>

                <!-- Background "Primer" -->
                <Rectangle Grid.Row="2" Grid.Column="2" Fill="#99000000" />

                <!-- Content -->
                <ContentPresenter Grid.Row="0" Grid.Column="0" Grid.RowSpan="3" Grid.ColumnSpan="3" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
        </Grid>
        </ControlTemplate>
        
        </Setter>
    </Style>

    <Style x:Key="http://schemas.microsoft.com/2003/xaml/MenuItem/PopupBackground" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <ContentControl Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/ContentControl/DropShadowEffect}">
                    <DockPanel Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">

                            <!--right -->        <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <!--bottom-->        <Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <!--left  -->        <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <!--top   -->        <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!--right -->        <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <!--bottom-->        <Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <!--left  -->        <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <!--top   -->        <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!--right -->        <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <!--bottom-->        <Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <!--left  -->        <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <!--top   -->        <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                        <ContentPresenter />
                    </DockPanel>
            </ContentControl>
        </ControlTemplate>
        
        </Setter>
    </Style>

    <Style x:Key="{x:Type Menu}" BasedOn="{x:Null}" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="AlignmentY" Value="Center" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type Menu}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <StackPanel Margin="{TemplateBinding Padding}" AlignmentY="{TemplateBinding AlignmentY}" AlignmentX="{TemplateBinding AlignmentX}" IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle" />
            </Border>
        </ControlTemplate>
        
        </Setter>
    </Style>

    <!--
         ****************************************
         * ContextMenu Style                    *
         ****************************************
    -->

    <Style x:Key="{x:Type ContextMenu}" BasedOn="{x:Null}" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="AlignmentY" Value="Center" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ContextMenu}">
            <Popup IsOpen="{Binding Path=IsOpen,RelativeSource={RelativeSource TemplatedParent}}" Placement="{TemplateBinding Placement}" PlacementTarget="{TemplateBinding PlacementTarget}" OffsetX="{TemplateBinding OffsetX}" OffsetY="{TemplateBinding OffsetY}">
                    <ContentControl Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/PopupBackground}">
                        <Border> <!-- Need this b/c I want margin on the GP -->
                            <StackPanel Margin="1" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="None" KeyboardNavigation.ControlTabNavigation="None" />
                        </Border>
                    </ContentControl>
             </Popup>
        </ControlTemplate>
        
        </Setter>
    </Style>


    <!--   PART: TopLevelItem   -->
    <Style x:Key="http://schemas.microsoft.com/2003/xaml/MenuItem/TopLevelItem" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Border Background="{TemplateBinding Background}">
                    <DockPanel Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">

                            <!--right -->
                            <Rectangle DockPanel.Dock="Right" x:Name="RightLine" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <!--bottom-->
                            <Rectangle DockPanel.Dock="Bottom" x:Name="BottomLine" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <!--left  -->
                            <Rectangle DockPanel.Dock="Left" x:Name="LeftLine" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <!--top   -->
                            <Rectangle DockPanel.Dock="Top" x:Name="TopLine" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                    <ContentPresenter Margin="5,2,5,2" />
                </DockPanel>
            </Border>

        <ControlTemplate.Triggers>

        <Trigger Property="Selector.IsSelected" Value="True">
        <Setter TargetName="RightLine" Property="Visibility" Value="Visible" />
        <Setter TargetName="BottomLine" Property="Visibility" Value="Visible" />
        <Setter TargetName="LeftLine" Property="Visibility" Value="Visible" />
        <Setter TargetName="TopLine" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="MenuItem.IsSubmenuOpen" Value="True">
        <Setter TargetName="RightLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="BottomLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="LeftLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="TopLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--   PART: TopLevelHeader   -->
    <Style x:Key="http://schemas.microsoft.com/2003/xaml/MenuItem/TopLevelHeader" BasedOn="{StaticResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/TopLevelItem}" TargetType="{x:Type ContentControl}">
        <!-- <ContentControl FontWeight="Bold" /> -->
    </Style>


    <!--   PART: SubmenuItem   -->
    <Style x:Key="http://schemas.microsoft.com/2003/xaml/MenuItem/SubmenuItem" TargetType="{x:Type ContentControl}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Selector.IsSelectable" Value="False" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Border Background="{TemplateBinding Background}">
                <DockPanel Margin="0,2,0,2">
                    <StackPanel x:Name="Checkmark" DockPanel.Dock="Left" Visibility="Hidden" AlignmentY="Center" FlowDirection="LeftToRight">
                        <Path Margin="4,0,6,0" Fill="{TemplateBinding Foreground}" Data="M 0 2.0 L 0 4.8 L 2.5 7.4 L 7.1 2.8 L 7.1 0 L 2.5 4.6 Z" />
                    </StackPanel>
                    <StackPanel x:Name="SubmenuIndicator" DockPanel.Dock="Right" Visibility="Hidden" AlignmentY="Center">
                        <Path Margin="4,0,6,0" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 0 8 L 4 4 Z" />
                    </StackPanel>
                    <StackPanel Margin="{TemplateBinding Padding}">
                        <ContentPresenter />
                    </StackPanel>
                </DockPanel>
            </Border>

        <ControlTemplate.Triggers>

        <Trigger Property="MenuItem.IsChecked" Value="True">
        <Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="Selector.IsSelectable" Value="True">
        <Setter TargetName="SubmenuIndicator" Property="Visibility" Value="Visible" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
        <Style.Triggers>
        <Trigger Property="Selector.IsSelected" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--   PART: SubmenuHeader   -->
    <Style x:Key="http://schemas.microsoft.com/2003/xaml/MenuItem/SubmenuHeader" BasedOn="{StaticResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/SubmenuItem}" TargetType="{x:Type ContentControl}">
        <Setter Property="Selector.IsSelectable" Value="True" />
    </Style>


    <!--   PART: Separator   -->
    <Style x:Key="http://schemas.microsoft.com/2003/xaml/MenuItem/Separator" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Border>
                <!-- BUG: Margin is never taken into account properly.  Need a buffer to put margin on. -->
                <Border Margin="1,2,1,3">
                    <Canvas Height="2">
                        <Rectangle Height="2" Canvas.Bottom="0" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        <Rectangle Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    </Canvas>
                </Border>
            </Border>
        </ControlTemplate>
        
        </Setter>
    </Style>


    <Style x:Key="{x:Type MenuItem}" BasedOn="{x:Null}" TargetType="{x:Type MenuItem}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="AlignmentX" Value="Left" />
        <Setter Property="AlignmentY" Value="Center" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type MenuItem}">
            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Canvas Background="Transparent">
                    <ContentControl x:Name="HeaderSite" Selector.IsSelected="{Binding Path=IsHighlighted,RelativeSource={RelativeSource TemplatedParent}}" MenuItem.IsChecked="{Binding Path=IsChecked,RelativeSource={RelativeSource TemplatedParent}}" MenuItem.IsSubmenuOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" />

                    <Popup x:Name="SubMenuPopup" Placement="Right" IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False">
                        <ContentControl Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/PopupBackground}">
                            <Border> <!-- Need this b/c I want margin on the GP -->
                                <GridPanel CellSpacing="0" Margin="{TemplateBinding Padding}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="None" KeyboardNavigation.ControlTabNavigation="None" />
                            </Border>
                        </ContentControl>
                    </Popup>
                </Canvas>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="Role" Value="TopLevelHeader">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/TopLevelHeader}" />
        <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
        </Trigger>
        <Trigger Property="Role" Value="TopLevelItem">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/TopLevelItem}" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuHeader">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/SubmenuHeader}" />
        <Setter TargetName="SubMenuPopup" Property="OffsetY" Value="-3" />
        <Setter TargetName="SubMenuPopup" Property="OffsetX" Value="-3" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuItem">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/MenuItem/SubmenuItem}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
    </Style>


    <!-- ********************* COMBOBOX ************************ -->

    <Style x:Key="http://schemas.microsoft.com/2003/xaml/ComboBox/TransparentButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type Button}">
            <DockPanel Background="Transparent">
                    <DockPanel DockPanel.Dock="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">

                            <!--right -->        <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <!--bottom-->        <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <!--left  -->        <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <!--top   -->        <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!--right -->        <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <!--bottom-->        <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <!--left  -->        <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <!--top   -->        <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <StackPanel x:Name="Arrow" Margin="1,1,1,1" AlignmentY="Center" AlignmentX="Center">
                        <Path Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                            </StackPanel>
                    </DockPanel>
            </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="R2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="B2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="L2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="T2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="Arrow" Property="Margin" Value="2,2,0,0" />
        </Trigger>
        <!-- Foreground will inherit from combobox, so shouldn't need to do anything here
            <Trigger Property="IsEnabled" Value="false">
            </Trigger>
            -->
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBox}" BasedOn="{x:Null}" TargetType="{x:Type ComboBox}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="1,1,1,1" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Canvas>
                    <DockPanel>
                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    </DockPanel>

                    <Border>
                        <DockPanel Margin="2">
                            <!-- saves space for the button which will be drawn on top -->
                            <FrameworkElement DockPanel.Dock="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                            <Border>
                                <Border x:Name="SelectedItemBorder" Margin="{TemplateBinding Padding}">
                                    <StackPanel AlignmentY="Center" ClipToBounds="{TemplateBinding ClipToBounds}">
                                        <ContentPresenter x:Name="ContentSite" Focusable="true" Margin="2,2,2,2" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                                    </StackPanel>
                                </Border>
                            </Border>
                        </DockPanel>
                    </Border>

                    <Border>
                    <Button Margin="2" MinWidth="0" MinHeight="0" Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/ComboBox/TransparentButtonStyle}" Command="ComboBox.ToggleDropDown" />
                    </Border>

                    <Popup Placement="Bottom" CloseMode="AutoCloseFocus" IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False">

                        <ContentControl Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/ContentControl/DropShadowEffect}">
                            <Border MaxHeight="{TemplateBinding MaxDropDownHeight}" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="Black" ClipToBounds="True" MinWidth="{TemplateBinding Width}">
                                <GridPanel CellSpacing="0" IsItemsHost="True" />
                            </Border>
                        </ContentControl>

                    </Popup>
                </Canvas>
            </Border>

        <ControlTemplate.Triggers>

        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                </MultiTrigger.Conditions>
        <Setter TargetName="SelectedItemBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        </MultiTrigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" BasedOn="{x:Null}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="AlignmentY" Value="Center" />
        <Setter Property="AlignmentX" Value="Left" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <StackPanel Margin="{TemplateBinding Padding}" AlignmentY="{TemplateBinding AlignmentY}" AlignmentX="{TemplateBinding AlignmentX}">
                    <ContentPresenter x:Name="ContentSite" />
                </StackPanel>
            </Border>
        <ControlTemplate.Triggers>

        <!--
            <Trigger Property="IsSelected" Value="true">
                <Set PropertyPath="Background" Value="{*SystemColors.HighlightBrushKey}" />
                <Set PropertyPath="Foreground" Value="{*SystemColors.HighlightTextBrushKey}" />
            </Trigger>
            -->
        <Trigger Property="IsEnabled" Value="false">
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <!--
            <Trigger Property="IsSelected" Value="true">
                <Set PropertyPath="Background" Value="{*SystemColors.HighlightBrushKey}" />
                <Set PropertyPath="Foreground" Value="{*SystemColors.HighlightTextBrushKey}" />
            </Trigger>
            -->
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

        <Style x:Key="{x:Type ToolTip}" BasedOn="{x:Null}" TargetType="{x:Type ToolTip}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
            <Setter Property="AlignmentX" Value="Center" />
            <Setter Property="AlignmentY" Value="Center" />
            <Setter Property="Padding" Value="1,2,1,2" />
            <Setter Property="ClipToBounds" Value="True" />
            <Setter Property="Template">
            
            <ControlTemplate TargetType="{x:Type ToolTip}">
                <Popup PlacementTarget="{TemplateBinding PlacementTarget}" Placement="{TemplateBinding Placement}" OffsetX="{TemplateBinding OffsetX}" OffsetY="{TemplateBinding OffsetY}" IsOpen="{TemplateBinding IsOpen}">


                    <ContentControl Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/ContentControl/DropShadowEffect}">

                                <!-- The content -->
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" ClipToBounds="{TemplateBinding ClipToBounds}">
                                <StackPanel Margin="{TemplateBinding Padding}" AlignmentX="{TemplateBinding AlignmentX}" AlignmentY="{TemplateBinding AlignmentY}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                    <ContentPresenter x:Name="ContentSite" />
                                </StackPanel>

                        </Border>

                    </ContentControl>

                </Popup>
            </ControlTemplate>
            
            </Setter>
        </Style>

    <!-- ********************* TabControl ************************ -->

    <Style x:Key="{x:Type TabControl}" BasedOn="{x:Null}" TargetType="{x:Type TabControl}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="1,1,1,1" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type TabControl}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid KeyboardNavigation.TabNavigation="Local">
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="ColumnDefinition0" />
                    <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                    <RowDefinition x:Name="RowDefinition1" Height="*" />
                    </Grid.RowDefinitions>

                    <DockPanel x:Name="ContentPanel" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Control.TabIndex="2" Dock="Fill" Grid.Column="0" Grid.Row="1">
                        <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                        <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                        <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                        <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                        <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                        <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                        <Border ClipToBounds="True" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                            <ContentPresenter x:Name="ContentSite" Margin="2,2,2,2" Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" />
                        </Border>
                    </DockPanel>

                    <TabPanel x:Name="HeaderPanel" TabControl.TabStripPlacement="{TemplateBinding TabStripPlacement}" Control.TabIndex="1" Grid.Column="0" Grid.Row="0" Grid.Top="2" Grid.Left="2" Grid.Right="2" IsItemsHost="True" DockPanel.Dock="Top" />

                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="Grid.Row" Value="1" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="Auto" TargetName="RowDefinition1" />
        <Setter Property="Grid.Top" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Bottom" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Left" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Right" Value="2" TargetName="HeaderPanel" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Grid.Row" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Grid.Column" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Column" Value="1" TargetName="ContentPanel" />
        <Setter Property="Width" Value="Auto" TargetName="ColumnDefinition0" />
        <Setter Property="Width" Value="*" TargetName="ColumnDefinition1" />
        <Setter Property="Height" Value="0" TargetName="RowDefinition1" />
        <Setter Property="Grid.Top" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Bottom" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Left" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Right" Value="0" TargetName="HeaderPanel" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Grid.Row" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Grid.Column" Value="1" TargetName="HeaderPanel" />
        <Setter Property="Grid.Column" Value="0" TargetName="ContentPanel" />
        <Setter Property="Width" Value="*" TargetName="ColumnDefinition0" />
        <Setter Property="Width" Value="Auto" TargetName="ColumnDefinition1" />
        <Setter Property="Height" Value="0" TargetName="RowDefinition1" />
        <Setter Property="Grid.Top" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Bottom" Value="2" TargetName="HeaderPanel" />
        <Setter Property="Grid.Left" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Right" Value="2" TargetName="HeaderPanel" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
    </Style>


    <!-- ********************* TabItem ************************ -->

    <Style x:Key="{x:Type TabItem}" BasedOn="{x:Null}" TargetType="{x:Type TabItem}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding" Value="12,2,12,2" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Template">
        
        <ControlTemplate TargetType="{x:Type TabItem}">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="True">
                <DockPanel x:Name="MainTabPanel" Canvas.Bottom="0">
                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Margin="2,0,2,0" x:Name="TopBorder1" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                            <!-- Top -->
                                <DockPanel DockPanel.Dock="Top" Height="1" x:Name="TopBorder2">
                                    <Rectangle DockPanel.Dock="Left" Width="1" Margin="1,0,0,0" x:Name="UpperBorderLeft" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                                    <Rectangle DockPanel.Dock="Right" Width="1" Margin="0,0,1,0" x:Name="UpperBorderRight" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                                    <Rectangle x:Name="UpperBorder" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                </DockPanel>

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" x:Name="LeftBorder" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" x:Name="RightBorder1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" x:Name="RightBorder2" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />


                            <!-- Bottom -->   <Rectangle DockPanel.Dock="Bottom" Height="1" Margin="1,0,0,0" x:Name="BottomBorder" Fill="{TemplateBinding Background}" />

                            <Border x:Name="InternalBorder" ClipToBounds="True" Background="{TemplateBinding Background}">
                                <StackPanel Margin="{TemplateBinding Padding}" AlignmentY="Center" AlignmentX="Center">
                                    <ContentPresenter x:Name="ContentSite" ContentSource="Header" />
                                </StackPanel>
                            </Border>
                </DockPanel>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="TopBorder1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="TopBorder1" />
        <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="TopBorder2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="UpperBorder" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="BottomBorder" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="BottomBorder" />
        </Trigger>
        <MultiTrigger>
        <!-- Selected and Top -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
        <Setter Property="Margin" Value="0,0,0,1" TargetName="LeftBorder" />
        <Setter Property="Margin" Value="0,0,0,1" TargetName="RightBorder1" />
        <Setter Property="Margin" Value="0,0,0,1" TargetName="RightBorder2" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Bottom -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
        <Setter Property="Margin" Value="0,1,0,0" TargetName="LeftBorder" />
        <Setter Property="Margin" Value="0,1,0,0" TargetName="RightBorder1" />
        <Setter Property="Margin" Value="0,1,0,0" TargetName="RightBorder2" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Left -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
        <Setter Property="Visibility" Value="Collapsed" TargetName="RightBorder1" />
        <Setter Property="Visibility" Value="Collapsed" TargetName="RightBorder2" />
        <Setter Property="Visibility" Value="Collapsed" TargetName="UpperBorderRight" />
        <Setter Property="Margin" Value="2,0,1,0" TargetName="BottomBorder" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Right -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
        <Setter Property="Visibility" Value="Collapsed" TargetName="LeftBorder" />
        <Setter Property="Visibility" Value="Collapsed" TargetName="UpperBorderLeft" />
        </MultiTrigger>
        <Trigger Property="IsFocused" Value="true">
        <Setter Property="Fill" Value="Orange" TargetName="UpperBorder" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        
        </Setter>
        <Style.Triggers>
        <MultiTrigger>
        <!-- Selected and Top -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
        <Setter Property="Margin" Value="0,0,0,-2" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Bottom -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
        <Setter Property="Margin" Value="0,-3,0,0" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Left -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
        <Setter Property="Padding" Value="12,2,14,2" />
        <Setter Property="Margin" Value="0,0,-2,0" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Right -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
        <Setter Property="Padding" Value="13,2,12,2" />
        <Setter Property="Margin" Value="-3,0,0,0" />
        </MultiTrigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>


    </Application.Resources>
</Application>
